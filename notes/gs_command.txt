struct CCommand
{
	texture buttonEnabled, buttonWait, buttonImpossible, buttonDepressed, buttonHighlighted;
	texture cursor;
	COrder *order;
	ActSeq *startSeq;
};

void ReadCCommand(char **pntfp, char **fstline)
{
	char wwl[MAX_LINE_SIZE], *word[MAX_WORDS_IN_LINE]; int nwords;
	CCommand *c = &(gs_command[strCommand.find(fstline[1])]);
	while(**pntfp)
	{
		*pntfp = GetLine(*pntfp, wwl);
		nwords = GetWords(wwl, word);
		if(!nwords) continue;
		if( *((uint*)(word[0])) == '_DNE' )
			return;
		if(!strcmp(word[0], "BUTTON_ENABLED"))
			c->buttonEnabled = GetTexture(word[1], 0);
		// ...
		else if(!strcmp(word[0], "USE_ORDER"))
			c->order = &(gs_order[strOrder.find(word[1])]);
		else if(!strcmp(word[0], "START_SEQUENCE"))
			c->startSeq = ReadActSeq(pntfp);
	}
	ferr("UEOF");
}

/*
struct CCondition
{
	CValue *test;
	char *hintstr;
	GrowList<CValue*> hintvalues;
};

void ReadCCondition(char **pntfp, char **fstline)
{
	char wwl[MAX_LINE_SIZE], *word[MAX_WORDS_IN_LINE]; int nwords;
	CCondition *c = &(gs_condition[strCondition.find(fstline[1])]);
	while(**pntfp)
	{
		*pntfp = GetLine(*pntfp, wwl);
		nwords = GetWords(wwl, word);
		if(!nwords) continue;
		if( *((uint*)(word[0])) == '_DNE' )
			return;
		char **w = word;
		if(!strcmp(word[0], "TEST"))
		{
			w++;
			c->test = ReadValue(&w);
		}
		else if(!strcmp(word[0], "HINT"))
		{
			w += 2;
			c->hintstr = GetLocText(word[1]);
			while((w - word) < nwords)
				c->hintvalues.add(ReadValue(&w));
		}
	}
	ferr("UEOF");
}
*/